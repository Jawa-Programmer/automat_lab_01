/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : statem.sm
 */

package smc;


public class AutomatFSM
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public AutomatFSM(SMCAutomat owner)
    {
        this (owner, AutomatMap.INT);
    }

    public AutomatFSM(SMCAutomat owner, SMCAutomatState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void end()
    {
        _transition = "end";
        getState().end(this);
        _transition = "";
        return;
    }

    public void proc(char let)
    {
        _transition = "proc";
        getState().proc(this, let);
        _transition = "";
        return;
    }

    public void restart()
    {
        _transition = "restart";
        getState().restart(this);
        _transition = "";
        return;
    }

    public SMCAutomatState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((SMCAutomatState) _state);
    }

    protected SMCAutomat getOwner()
    {
        return (_owner);
    }

    public void setOwner(SMCAutomat owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private SMCAutomat _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class SMCAutomatState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected SMCAutomatState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(AutomatFSM context) {}
        protected void exit(AutomatFSM context) {}

        protected void end(AutomatFSM context)
        {
            Default(context);
        }

        protected void proc(AutomatFSM context, char let)
        {
            Default(context);
        }

        protected void restart(AutomatFSM context)
        {
            Default(context);
        }

        protected void Default(AutomatFSM context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
    // Constants.
    //

        private static final long serialVersionUID = 1L;
    }

    /* package */ static abstract class AutomatMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final AutomatMap_INT INT =
            new AutomatMap_INT("AutomatMap.INT", 0);
        public static final AutomatMap_A0 A0 =
            new AutomatMap_A0("AutomatMap.A0", 1);
        public static final AutomatMap_A1 A1 =
            new AutomatMap_A1("AutomatMap.A1", 2);
        public static final AutomatMap_A2 A2 =
            new AutomatMap_A2("AutomatMap.A2", 3);
        public static final AutomatMap_A3 A3 =
            new AutomatMap_A3("AutomatMap.A3", 4);
        public static final AutomatMap_A4 A4 =
            new AutomatMap_A4("AutomatMap.A4", 5);
        public static final AutomatMap_A5 A5 =
            new AutomatMap_A5("AutomatMap.A5", 6);
        public static final AutomatMap_A6 A6 =
            new AutomatMap_A6("AutomatMap.A6", 7);
        public static final AutomatMap_B B =
            new AutomatMap_B("AutomatMap.B", 8);
        public static final AutomatMap_C0 C0 =
            new AutomatMap_C0("AutomatMap.C0", 9);
        public static final AutomatMap_C1 C1 =
            new AutomatMap_C1("AutomatMap.C1", 10);
        public static final AutomatMap_D0 D0 =
            new AutomatMap_D0("AutomatMap.D0", 11);
        public static final AutomatMap_D1 D1 =
            new AutomatMap_D1("AutomatMap.D1", 12);
        public static final AutomatMap_PROHIBITED PROHIBITED =
            new AutomatMap_PROHIBITED("AutomatMap.PROHIBITED", 13);
        public static final AutomatMap_ACCEPTABLE ACCEPTABLE =
            new AutomatMap_ACCEPTABLE("AutomatMap.ACCEPTABLE", 14);
    }

    protected static class AutomatMap_Default
        extends SMCAutomatState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected AutomatMap_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_INT
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_INT(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {

            if (let == 'h')
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(AutomatMap.A0);
                (context.getState()).entry(context);
            }

            else
            {
                super.proc(context, let);
            }

            return;
        }

        @Override
        protected void restart(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.INT);
            (context.getState()).entry(context);

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_A0
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_A0(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {

            if (let == 't')
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(AutomatMap.A1);
                (context.getState()).entry(context);
            }

            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_A1
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_A1(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {

            if (let == 't')
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(AutomatMap.A2);
                (context.getState()).entry(context);
            }

            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_A2
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_A2(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {

            if (let == 'p')
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(AutomatMap.A3);
                (context.getState()).entry(context);
            }

            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_A3
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_A3(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {

            if (let == ':')
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(AutomatMap.A4);
                (context.getState()).entry(context);
            }

            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_A4
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_A4(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {

            if (let == '/')
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(AutomatMap.A5);
                (context.getState()).entry(context);
            }

            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_A5
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_A5(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {

            if (let == '/')
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(AutomatMap.A6);
                (context.getState()).entry(context);
            }

            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_A6
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_A6(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {
            SMCAutomat ctxt = context.getOwner();

            if (ctxt.is_latin(let))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.RESET_COUNTER();
                }
                finally
                {
                    context.setState(AutomatMap.B);
                    (context.getState()).entry(context);
                }

            }

            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_B
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_B(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {
            SMCAutomat ctxt = context.getOwner();

            if (ctxt.is_latin(let) && ctxt.GET_LETTER_COUNT() <= 20)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.INC_COUNTER();
                }
                finally
                {
                    context.setState(AutomatMap.B);
                    (context.getState()).entry(context);
                }

            }
            else if (let == '.')
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(AutomatMap.C0);
                (context.getState()).entry(context);
            }
            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_C0
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_C0(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {
            SMCAutomat ctxt = context.getOwner();

            if (ctxt.is_latin(let))
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.RESET_COUNTER();
                }
                finally
                {
                    context.setState(AutomatMap.C1);
                    (context.getState()).entry(context);
                }

            }

            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_C1
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_C1(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void end(AutomatFSM context)
        {
            SMCAutomat ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.accept();
            }
            finally
            {
                context.setState(AutomatMap.ACCEPTABLE);
                (context.getState()).entry(context);
            }


            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {
            SMCAutomat ctxt = context.getOwner();

            if (ctxt.is_latin(let) && ctxt.GET_LETTER_COUNT() <= 5)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.INC_COUNTER();
                }
                finally
                {
                    context.setState(AutomatMap.C1);
                    (context.getState()).entry(context);
                }

            }
            else if (let == ':')
            {
                (context.getState()).exit(context);
                // No actions.
                context.setState(AutomatMap.D0);
                (context.getState()).entry(context);
            }
            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_D0
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_D0(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {
            SMCAutomat ctxt = context.getOwner();

            if (let > '0' && let <= '9')
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.RESET_COUNTER();
                    ctxt.APPEND_DIGIT(let);
                }
                finally
                {
                    context.setState(AutomatMap.D1);
                    (context.getState()).entry(context);
                }

            }

            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_D1
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_D1(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.PROHIBITED);
            (context.getState()).entry(context);

            return;
        }

        @Override
        protected void end(AutomatFSM context)
        {
            SMCAutomat ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.accept();
            }
            finally
            {
                context.setState(AutomatMap.ACCEPTABLE);
                (context.getState()).entry(context);
            }


            return;
        }

        @Override
        protected void proc(AutomatFSM context, char let)
        {
            SMCAutomat ctxt = context.getOwner();

            if (let >= '0' && let <= '9' && ctxt.GET_LETTER_COUNT() <= 5)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.INC_COUNTER();
                    ctxt.APPEND_DIGIT(let);
                }
                finally
                {
                    context.setState(AutomatMap.D1);
                    (context.getState()).entry(context);
                }

            }

            else
            {
                super.proc(context, let);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_PROHIBITED
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_PROHIBITED(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(AutomatFSM context)
        {


            return;
        }

        @Override
        protected void restart(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.INT);
            (context.getState()).entry(context);

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class AutomatMap_ACCEPTABLE
        extends AutomatMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private AutomatMap_ACCEPTABLE(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void restart(AutomatFSM context)
        {

            (context.getState()).exit(context);
            context.setState(AutomatMap.INT);
            (context.getState()).entry(context);

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
